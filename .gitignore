#include <iostream>
#include <bits/stdc++.h>
using namespace std;
class Node{
public:
  int data;
  Node*next;

Node(int data){
  this->data=data;
 this-> next=NULL;
}

~Node(){
  int k=this->data;
   if(this->next!=NULL){
     delete next;
     this->next=NULL;
   }
  cout<<"Memory is free for node with data "<<k<<endl;
}



};

// inserting from front 
void inserthead(Node* &head,int d){
  Node*temp=new Node(d);
  temp->next=head;
  head=temp;
}
// inserting from back
void inserttail(Node*&tail ,int d){
Node*temp=new Node(d);
  tail->next=temp;
tail=temp;

}
// printing the inserted value
void print(Node*&head){

    Node*temp=head;
  while(temp!=NULL)
  {
    cout<<temp->data<<" ";
    temp=temp->next;
  } cout<<endl;
  }
// inserting from anywhere
void insertinmiddle(Node* &tail,Node* &head,int position,int d){

if(position==1){
   inserthead(head, d);
  return;
  }


  int count=1;
Node*temp=head;  
  while(count<position-1){
    temp=temp->next;
  count++;}
if(temp->next==NULL){
  inserttail(tail , d);
return;}
  Node*nodetoinsert=new Node(d);
nodetoinsert->next=temp->next;
  temp->next=nodetoinsert;
}
// deletion in linked list
void deletelink(int position,Node* &head){

if(position==1){
  Node*temp=head;
  head=head->next;
  temp->next=NULL;
  delete temp;
}
  else{
    Node*curr=head;
    Node*prev=NULL;
    int count=1;
    while(count<position){
      prev=curr;
      curr=curr->next;
      count++;
    }
     prev->next=curr->next;
    curr->next=NULL;
    delete curr;
  }

  
}
int main() {
 Node*node1=new Node(7);

  Node*head=node1;



Node*tail=node1;
  print(tail);
inserttail(tail,9);
   print(head);
inserttail(tail,5);
print(head);


  insertinmiddle(tail,head,4,69);
  insertinmiddle(tail,head,5,99);
  print(head);
deletelink( 1,head);
  print(head);
  return 0;
  }
